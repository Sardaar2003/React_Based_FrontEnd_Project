{"version":3,"sources":["assets/logo192.png","assets/bg1.jpg","components/Styles.js","pages/Home.js","components/FormLib.js","Auth/Action/UserAction.js","pages/Login.js","pages/SignUp.js","pages/Dashboard.js","pages/EmailSent.js","pages/FormData.js","pages/forgottenPassword.js","pages/PasswordReset.js","pages/ResponsePage.js","pages/ResponsePageSuccess.js","App.js","Auth/Reducer/RootReducer.js","Auth/store.js","index.js"],"names":["module","exports","colors","primary","theme","light1","light2","dark1","dark2","dark3","red","StyledContainer","styled","div","_templateObject","_taggedTemplateLiteral","background","StyledTitle","h2","_templateObject2","props","size","color","StyledSubTitle","p","_templateObject3","Avatar","_templateObject4","image","StyledButton","Link","_templateObject5","ButtonGroup","_templateObject6","StyledInputText","input","_templateObject7","onInvalid","concat","StyledLabel","_templateObject8","StyledFormArea","_templateObject9","StyledFormButton","button","_templateObject10","StyledIcon","_templateObject11","right","ErrorMessage","_templateObject12","ExtraText","_templateObject13","white","TextLink","_templateObject14","CopyRightText","_templateObject15","Home","React","createElement","style","position","top","left","backgroundColor","width","padding","display","justifyContent","logo","to","TextInput","_ref","icon","field","meta","useField","show","setShow","useState","htmlfor","name","label","type","Object","assign","touched","error","onClick","FiEye","FiEyeOff","visibility","loginUser","credentials","history","setFieldError","setSubmitting","async","axios","post","headers","then","response","data","console","log","status","message","includes","userData","token","_id","sessionService","saveSession","saveUser","localStorage","setItem","JSON","stringify","catch","err","connect","useNavigate","userEmail","useParams","Formik","initialValues","email","password","onSubmit","values","_ref2","validationSchema","yup","required","min","max","_ref3","isSubmitting","Form","placeholder","FiMail","FiLock","TailSpin","height","signupUser","dispatchEvent","repeatPassword","dateOfBirth","oneOf","FiUser","FiCalendar","session","user","logoutUser","deleteSession","deleteUser","EmailSent","reset","apiCall01","storedUserData","getItem","userData1","parse","res","orderID","responseData","gateWayResponseID","gateWayID","gateAuthCode","ORDERID","customerID","OrderNotes","offerId","emailId","phoneNumber","firstName","lastName","countryCode","addressCode","cityName","stateName","zipCode","cardNumber","cardCVV","expiryMonth","expiryYear","matches","length","Date","getFullYear","resetForm","BiSolidOffer","FiPhoneCall","FaMapMarkerAlt","FaAddressBook","FaCity","MdPlace","FaCreditCard","FaCcVisa","MdCalendarMonth","BsCalendarMonthFill","Fragment","forgottenPassword","redirectUrl","resetPassword","userId","resetString","newPassword","confirmNewPassword","ResponsePage","ResponsePageSuccess","checked","Router","Routes","Route","path","element","ForgottenPassword","PasswordReset","SignUp","Dashboard","Login","FormData","rootReducer","combineReducers","sessionReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","preloadedState","initSessionService","ReactDOM","createRoot","document","getElementById","render","StrictMode","Provider","App"],"mappings":"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","file":"static/js/main.e8543f30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo192.54685a86.png\";","module.exports = __webpack_public_path__ + \"static/media/bg1.d6b9a6e6.jpg\";","import styled from \"styled-components\";\r\nimport background from \"../assets/bg1.jpg\";\r\nimport {Link} from \"react-router-dom\";\r\nexport const colors={\r\n    primary:\"#fff\",\r\n    theme:\"#BE185D\",\r\n    light1:\"#F3F4F6\",\r\n    light2:\"#E5E7EB\",\r\n    dark1:\"#1F2937\",\r\n    dark2:\"#4B5563\",\r\n    dark3:\"#9CA3AF\",\r\n    red:\"#DC2626\"\r\n}\r\n\r\n\r\nexport const StyledContainer=styled.div`\r\n    margin: 0;\r\n    min-height: 100vh;\r\n    display : flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background: linear-gradient(0deg,rgba(0,0,0,0.6),rgba(0,0,0,0.6)),url(${background});\r\n    background-size: cover;\r\n    background-attachment: fixed;\r\n    color:white;\r\n`;\r\n\r\n// Home Components\r\n\r\nexport const StyledTitle=styled.h2`\r\n    font-size: ${(props)=>props.size}px;\r\n    text-align: center;\r\n    color: ${(props)=> props.color?props.color:colors.primary};\r\n    padding: 5px;\r\n    margin-bottom: 20px; \r\n    `;\r\n\r\nexport const StyledSubTitle=styled.p`\r\n    font-size: ${(props)=>props.size}px;\r\n    text-align: center;\r\n    color: ${(props)=> props.color?props.color:colors.primary};\r\n    padding: 5px;\r\n    margin-bottom: 25px; \r\n`;\r\n\r\nexport const Avatar=styled.div`\r\n    width: 85px;\r\n    height: 85px;\r\n    border-radius: 50px;\r\n    background-image: url(${props=>props.image});\r\n    background-size: cover;\r\n    background-position: center;\r\n    margin: auto;\r\n    `;\r\n\r\nexport const StyledButton=styled(Link)`\r\n    padding: 10px;\r\n    width: 150px;\r\n    background-color: transparent;\r\n    font-size: 16px;\r\n    border: 3px solid #1B1A55;\r\n    border-radius: 25px;\r\n    color:#1B1A55;\r\n    font-weight: bold;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    outline: 0;\r\n    transition: ease-in-out 0.3s;\r\n    margin-bottom:10px;\r\n\r\n    &:hover{\r\n        background-color: #1B1A55;\r\n        color: white;\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const ButtonGroup = styled.div`\r\n    display: flex;\r\n    flex-direction: column; /* Change this line */\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n    margin-top: 25px;\r\n`;\r\n// Input Related Styles\r\nexport const StyledInputText=styled.input`\r\n    width: 350px;\r\n    padding: 15px;\r\n    padding-left: 50px;\r\n    font-size: 17px;\r\n    letter-spacing: 1px;\r\n    color: black;\r\n    border: 0px;\r\n    border-radius: 10px;\r\n    display: block;\r\n    margin: 5px auto 10px auto;\r\n    transition: ease-in-out 0.3s;\r\n\r\n    ::placeholder{\r\n        color:black;\r\n    }\r\n\r\n    ${(props)=> props.onInvalid && `background-color: ${colors.red}; color: ${colors.primary};`}\r\n`;\r\n\r\nexport const StyledLabel=styled.p`\r\n    text-align: left;\r\n    font-size: 13px;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport const StyledFormArea=styled.div`\r\n    background: rgba( 255, 255, 255, 0.3 );\r\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\r\n    backdrop-filter: blur( 5px );\r\n    -webkit-backdrop-filter: blur( 1px );\r\n    border-radius: 10px;\r\n    border: 1px solid rgba( 255, 255, 255, 0.18 );\r\n    text-align: center;\r\n    padding: 45px 55px;\r\n    margin: 20px;\r\n    top:20%;\r\n`;\r\n\r\nexport const StyledFormButton = styled.button`\r\n    padding: 10px;\r\n    width: 150px;\r\n    background-color: transparent;\r\n    font-size: 16px;\r\n    border: 3px solid #1B1A55;\r\n    border-radius: 25px;\r\n    color: #1B1A55;\r\n    font-weight: bold;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    transition: ease-in-out 0.3s;\r\n    outline: 0;\r\n    margin-bottom: 10px; /* Add this line */\r\n\r\n    &:hover{\r\n        background-color: #1B1A55;\r\n        color: white;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\n//Icons \r\nexport const StyledIcon=styled.p`\r\n    color: ${colors.dark1};\r\n    position: absolute;\r\n    font-size: 21px;\r\n    top: 35px;\r\n    ${(props)=>props.right && `right: 15px;`}\r\n    ${(props)=>!props.right && `left: 15px;`}\r\n\r\n`;\r\n\r\n//Error Messages display\r\nexport const ErrorMessage=styled.div`\r\n    font-size: 15px;\r\n    font-weight: bold;\r\n    color: ${colors.red};\r\n    margin-top: -5px;\r\n    margin-bottom: 10px;\r\n    text-align: center;\r\n`;\r\n\r\nexport const ExtraText=styled.p`\r\n    font-size: ${(props)=>props.size}px;\r\n    text-align: center;\r\n    color: ${(props)=>(props.color? props.color : colors.white)};\r\n    padding: 3px;\r\n    margin-top: 20px;\r\n`;\r\n\r\nexport const TextLink=styled(Link)`\r\n    text-decoration: none;\r\n    color:#FF7F3E;\r\n    transition: ease-in-out 0.3s;\r\n\r\n    &:hover{\r\n        text-decoration: underline;\r\n        letter-spacing: 2px;\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\n// CopyRight Text\r\n\r\nexport const CopyRightText=styled.p`\r\n    padding: 5px;\r\n    margin: 20px;\r\n    text-align: center;\r\n    color: white;\r\n\r\n`;","import React from 'react';\r\nimport { StyledTitle,StyledSubTitle,Avatar,StyledButton,ButtonGroup, StyledFormArea } from '../components/Styles';\r\nimport logo from \"../assets/logo192.png\";\r\nconst Home=()=>{\r\n    return (\r\n        <div>\r\n            <div style={{\r\n                position:\"absolute\",\r\n                top:0,\r\n                left:0,\r\n                backgroundColor:\"transparent\",\r\n                width:\"100%\",\r\n                padding:\"15px\",\r\n                display:\"flex\",\r\n                justifyContent:\"flex-start\",\r\n            }}>\r\n                <Avatar image={logo}></Avatar>\r\n            </div>\r\n            <StyledFormArea>\r\n                <StyledTitle size={65}>Welcome to the TechVista Website</StyledTitle>\r\n                <StyledSubTitle size={27}>Feel Free to Explore our page</StyledSubTitle>\r\n                <ButtonGroup>\r\n                    <StyledButton to=\"/login\">LOGIN</StyledButton>\r\n                    <StyledButton to=\"/signup\">SIGNUP</StyledButton>\r\n                </ButtonGroup>\r\n            </StyledFormArea>\r\n            \r\n        </div>\r\n    );\r\n}\r\nexport default Home;","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport {\r\n    StyledInputText,\r\n    StyledLabel,\r\n    StyledIcon,\r\n    ErrorMessage,\r\n} from \"./Styles\";\r\n\r\nimport {useState} from \"react\";\r\n\r\n//Eye Icon for Password\r\nimport { FiEye,FiEyeOff } from 'react-icons/fi';\r\n\r\nexport const TextInput=({icon,...props})=>{\r\n    const [field,meta]=useField(props);\r\n    const [show,setShow]=useState(false);\r\n    return (\r\n    <div style={{position:\"relative\"}}>\r\n        <StyledLabel htmlfor={props.name}>{props.label}</StyledLabel>\r\n        {props.type!==\"password\" && <StyledInputText onInvalid={meta.touched && meta.error} {...field} {...props}></StyledInputText>}\r\n        {props.type===\"password\" && (\r\n            <StyledInputText onInvalid={meta.touched && meta.error} {...field} {...props} type={show?\"text\":\"password\"}></StyledInputText>\r\n        )}\r\n        <StyledIcon>{icon}</StyledIcon>\r\n        {\r\n            props.type===\"password\" && \r\n            <StyledIcon onClick={()=>setShow(!show)} right>\r\n                {show && <FiEye></FiEye>}\r\n                {!show && <FiEyeOff></FiEyeOff>}\r\n            </StyledIcon>\r\n        }\r\n        {\r\n            meta.touched && meta.error ? (<ErrorMessage>{meta.error}</ErrorMessage>):(<ErrorMessage style={{visibility:\"hidden\"}}>.</ErrorMessage>)\r\n        }\r\n    </div>\r\n    );\r\n}","import axios from \"axios\";\r\n\r\nimport { sessionService } from \"redux-react-session\";\r\n\r\n\r\nexport const loginUser=(credentials,history,setFieldError,setSubmitting)=>{\r\n\r\n    return async ()=>\r\n    {\r\n        //Make Checks and get some Data\r\n\r\n        await axios.post(\"https://react-based-project-updation.onrender.com/user/signIn\",credentials,\r\n            {\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\"\r\n                }\r\n            }\r\n        ).then((response)=>\r\n            {\r\n                const {data}=response;\r\n                console.log(data);\r\n                if (data.status ===\"FAILED\"){\r\n                    const { message }=data;\r\n\r\n                    if (message.includes(\"User\")){\r\n                        setFieldError(\"email\",message);\r\n                        setFieldError(\"password\",message);\r\n                    }\r\n                    else if (message.includes(\"Password\")){\r\n                        setFieldError(\"password\",message);\r\n                    }\r\n                    else if (message.includes(\"Email\")){\r\n                        setFieldError(\"email\",message);\r\n                    }\r\n\r\n                }\r\n                else if (data.status === \"SUCCESS\"){\r\n                    const userData=data.data[0];\r\n                    const token=userData._id;\r\n                    console.log(data);\r\n                    sessionService.saveSession(token).then(()=>\r\n                        {\r\n                            sessionService.saveUser(userData).then(()=>\r\n                            {\r\n                                // console.log(userData);\r\n                                localStorage.setItem(\"UserData\", JSON.stringify(userData));\r\n                                    history(\"/dashboard\");\r\n                                }).catch(err=>console.error(err))\r\n                        }).catch(err=>console.error(err))\r\n                }\r\n                //Complete Submission\r\n                setSubmitting(false);\r\n\r\n            }\r\n        ).catch((err)=>\r\n            {\r\n                console.error(err);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const signupUser=(credentials,history,setFieldError,setSubmitting)=>{\r\n    return async (dispatchEvent)=>\r\n        {\r\n\r\n            await axios.post(\"https://react-based-project-updation.onrender.com/user/signUp\",credentials,\r\n                {\r\n                    headers:{\r\n                        \"Content-Type\":\"application/json\"\r\n                    }\r\n                }\r\n            ).then((response)=>\r\n            {\r\n                const {data}=response;\r\n                if (data.status===\"FAILED\")\r\n                    {\r\n                        const {message}=data;\r\n                        if(message.includes(\"Name\"))\r\n                            {\r\n                                setFieldError(\"name\",message);\r\n                            }\r\n                        else if (message.includes(\"Email\"))\r\n                            {\r\n                                setFieldError(\"email\",message);\r\n                            }\r\n                        else if (message.includes(\"DateOfBirth\"))\r\n                            {\r\n                                setFieldError(\"dateOfBirth\",message);\r\n                            }\r\n                        else if (message.includes(\"Password\"))\r\n                            {\r\n                                setFieldError(\"password\",message);\r\n                            }\r\n                        else if (message.includes(\"User\")){\r\n                            setFieldError(\"name\",message);\r\n                            setFieldError(\"email\",message);\r\n                            setFieldError(\"dateOfBirth\",message);\r\n                            setFieldError(\"password\",message);\r\n                        }\r\n                        \r\n                            \r\n                    }\r\n                else if (data.status===\"PENDING\")\r\n                    {\r\n                    // Email has to be verified\r\n                        const {email}=credentials;\r\n                        history(`/emailsent/${email}`);\r\n                    }\r\n                else if (data.status===\"SUCCESS\")\r\n                    {\r\n                        const {email,password}=credentials;\r\n                        dispatchEvent(loginUser({email,password},history,setFieldError,setSubmitting));\r\n                }\r\n                // Complete Submission\r\n                setSubmitting(false);\r\n            }\r\n                ).catch((err)=>console.error(err));\r\n        }\r\n}\r\n\r\nexport const logoutUser=(history)=>\r\n    {\r\n        return async ()=>\r\n            {\r\n                await sessionService.deleteSession();\r\n                await sessionService.deleteUser();\r\n                history(\"/\");\r\n            }\r\n\r\n}\r\n    \r\n\r\nexport const forgottenPassword=(credentials,history,setFieldError,setSubmitting)=>{\r\n\r\n    return async ()=>\r\n    {\r\n        //Make Checks and get some Data\r\n\r\n        await axios.post(\"https://react-based-project-updation.onrender.com/user/requestPasswordReset\",credentials,\r\n            {\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\"\r\n                }\r\n            }\r\n        ).then((response)=>\r\n            {\r\n                const {data}=response;\r\n                console.log(data);\r\n                if (data.status ===\"FAILED\"){\r\n                    const { message }=data;\r\n\r\n                    if (message.includes(\"Email\") || message.includes(\"Account\") || message.includes(\"Password\")){\r\n                        setFieldError(\"email\",message);\r\n                    }\r\n                }\r\n                else if (data.status === \"PENDING\"){\r\n                    const { email } = credentials;\r\n                    history(`/emailsent/${email}/${true}`);\r\n                }\r\n                //Complete Submission\r\n                setSubmitting(false);\r\n\r\n            }\r\n        ).catch((err)=>\r\n            {\r\n                console.error(err);\r\n            }\r\n        )\r\n    }\r\n}\r\nexport const resetPassword=(credentials,history,setFieldError,setSubmitting)=>{\r\n\r\n    return async ()=>\r\n    {\r\n        //Make Checks and get some Data\r\n\r\n        await axios.post(\"https://react-based-project-updation.onrender.com/user/resetPassword\",credentials,\r\n            {\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\"\r\n                }\r\n            }\r\n        ).then((response)=>\r\n            {\r\n                const {data}=response;\r\n                console.log(data);\r\n                if (data.status ===\"FAILED\"){\r\n                    const { message }=data;\r\n\r\n                    if (message.includes(\"Password\")){\r\n                        setFieldError(\"newPassword\",message);\r\n                    }\r\n                }\r\n                else if (data.status === \"SUCCESS\"){\r\n                    history(`/emailsent`);\r\n                }\r\n                //Complete Submission\r\n                setSubmitting(false);\r\n\r\n            }\r\n        ).catch((err)=>\r\n            {\r\n                console.error(err);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const apiCall01 = (credentials, history, setFieldError, setSubmitting) => {\r\n    console.log(credentials);\r\n    const storedUserData = localStorage.getItem(\"UserData\");\r\n    if (storedUserData) {\r\n        const userData1 = JSON.parse(storedUserData);\r\n        credentials[\"Name\"] = userData1.name;\r\n        console.log(credentials);\r\n    }\r\n    else {\r\n        history(\"/login\");\r\n        setSubmitting(false);\r\n        return;\r\n    }\r\n    return async () => { \r\n        await axios.post(\"https://react-based-project-updation.onrender.com/user/APIRequest_01\",credentials,\r\n                {\r\n                    headers:{\r\n                        \"Content-Type\":\"application/json\"\r\n                    }\r\n                }\r\n        ).then((res) => {\r\n            const { data} = res;\r\n            const { status } = data;\r\n            console.log(res);\r\n            if (status == \"FAILED\") {\r\n                const { message, orderID } = data;\r\n                console.log(res);\r\n                history(`/response/${message}/${orderID}/${status}`);\r\n            }\r\n            else {\r\n                const { responseData, gateWayResponseID, gateWayID, gateAuthCode, ORDERID, customerID, OrderNotes } = data;\r\n                console.log('Response Data:', responseData);\r\n                console.log('GateWay Response ID:', gateWayResponseID);\r\n                console.log('GateWay ID:', gateWayID);\r\n                console.log('GateAuthCode:', gateAuthCode);\r\n                console.log('Order ID:', ORDERID);\r\n                console.log('Customer ID:', customerID);\r\n                console.log('Order Notes:', OrderNotes);\r\n                history(`/responseSuccess/${status}/${responseData}/${gateWayResponseID}/${gateWayID}/${gateAuthCode}/${ORDERID}/${customerID}/${OrderNotes}`);\r\n            }\r\n            \r\n        })\r\n        .catch((err) => {\r\n            console.error(err);\r\n        })\r\n    };\r\n}\r\n","import React from 'react';\r\nimport {StyledFormArea,StyledFormButton, Avatar,StyledTitle,colors,ButtonGroup, ExtraText, TextLink, CopyRightText} from \"../components/Styles\";\r\nimport logo from \"../assets/logo192.png\";\r\n\r\n//Formik Import \r\nimport {Formik,Form} from \"formik\";\r\nimport { TextInput } from '../components/FormLib';\r\n\r\n//Login Icons\r\nimport {FiMail,FiLock} from \"react-icons/fi\";\r\n\r\n//Validation of Inputs\r\nimport * as yup from \"yup\";\r\n\r\n//Loader and Spinner\r\nimport {TailSpin} from \"react-loader-spinner\";\r\n\r\n//Auth and Redux\r\nimport {connect} from \"react-redux\";\r\nimport { loginUser } from '../Auth/Action/UserAction';\r\nimport {useNavigate,useParams } from \"react-router-dom\";\r\n\r\nconst Login=({loginUser})=>{\r\n    const history = useNavigate();\r\n    const { userEmail } = useParams();\r\n    return (\r\n        <div>\r\n            <StyledFormArea>\r\n                <Avatar image={logo}></Avatar>\r\n                <StyledTitle color={colors.primary} size={30}>MEMBER LOGIN</StyledTitle>\r\n                <Formik initialValues={\r\n                    {\r\n                    email:userEmail,\r\n                    password:\"\",\r\n                    }\r\n                }\r\n                onSubmit={\r\n                    (values,{setSubmitting,setFieldError})=>{\r\n                    console.log(values);\r\n                    loginUser(values,history,setFieldError,setSubmitting);\r\n                    }\r\n                }\r\n                validationSchema={\r\n                    yup.object({\r\n                        email: yup.string().email(\"INVALID EMAIL ADDRESS\").required(\"REQUIRED EMAIL ADDRESS\"),\r\n                        password: yup.string().min(8,\"SHOULD BE OF MINIMUM 8 CHARACTERS\").max(30,\"SHOULD BE WITHIN 30 CHARACTERS\").required(\"PASSWORD IS REQUIRED\"),\r\n                    })\r\n                }>\r\n                    {({isSubmitting})=>(\r\n                        <Form>\r\n                            <TextInput name=\"email\" type=\"text\" label=\"EMAIL ADDRESS\" placeholder=\"abcd@example.com\" icon={<FiMail></FiMail>}></TextInput>\r\n                            <TextInput name=\"password\" type=\"password\" label=\"PASSWORD\" placeholder=\"********\" icon={<FiLock></FiLock>}></TextInput>\r\n                            <ButtonGroup>\r\n                                {!isSubmitting && (<StyledFormButton type=\"submit\">LOGIN</StyledFormButton>)}\r\n                                {\r\n                                    isSubmitting && (\r\n                                        <TailSpin color=\"#1B1A55\" height={49} width={100}></TailSpin>\r\n                                    )\r\n                                }\r\n                            </ButtonGroup>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <ExtraText>Forgot Password ? <TextLink to=\"/forgottenPassword\">RESET PASSWORD</TextLink></ExtraText>\r\n                <ExtraText>New Here ? <TextLink to=\"/signUp\">SIGNUP</TextLink></ExtraText>\r\n            </StyledFormArea>\r\n            <CopyRightText>All Rights reserved &copy; 2024</CopyRightText>\r\n        </div>\r\n    );\r\n}\r\nexport default connect(null,{loginUser})(Login);","import React from 'react';\r\nimport {StyledFormArea,StyledFormButton, Avatar,StyledTitle,colors,ButtonGroup, ExtraText, TextLink, CopyRightText} from \"../components/Styles\";\r\nimport logo from \"../assets/logo192.png\";\r\n\r\n//Formik Import \r\nimport {Formik,Form} from \"formik\";\r\nimport { TextInput } from '../components/FormLib';\r\n\r\n//Login Icons\r\nimport {FiMail,FiLock,FiUser,FiCalendar} from \"react-icons/fi\";\r\n\r\n//Validation of Inputs\r\nimport * as yup from \"yup\";\r\n\r\n//Loader and Spinner\r\nimport {TailSpin} from \"react-loader-spinner\";\r\n\r\n//Auth and Redux\r\nimport {connect} from \"react-redux\";\r\nimport { signupUser } from '../Auth/Action/UserAction';\r\nimport {useNavigate } from \"react-router-dom\";\r\n\r\nconst SignUp=({signupUser})=>{\r\n    const history=useNavigate();\r\n    return (\r\n        <div>\r\n            <StyledFormArea>\r\n                <Avatar image={logo}></Avatar>\r\n                <StyledTitle color={colors.primary} size={30}>MEMBER SIGNUP</StyledTitle>\r\n                <Formik initialValues={\r\n                    {\r\n                    email:\"\",\r\n                    password:\"\",\r\n                    repeatPassword:\"\",\r\n                    dateOfBirth:\"\",\r\n                    name:\"\",\r\n                    }\r\n                }\r\n                onSubmit={\r\n                    (values,{setSubmitting,setFieldError})=>\r\n                    {\r\n                        console.log(values);\r\n                        signupUser(values,history,setFieldError,setSubmitting);\r\n                    }\r\n                }\r\n                validationSchema={\r\n                    yup.object({\r\n                        email: yup.string().email(\"INVALID EMAIL ADDRESS\").required(\"REQUIRED EMAIL ADDRESS\"),\r\n                        password: yup.string().min(8,\"SHOULD BE OF MINIMUM 8 CHARACTERS\").max(30,\"SHOULD BE WITHIN 30 CHARACTERS\").required(\"PASSWORD IS REQUIRED\"),\r\n                        name: yup.string().required(\"REQUIRED FIELD\"),\r\n                        dateOfBirth: yup.date().required(\"REQUIRED FIELD\"),\r\n                        repeatPassword: yup.string().required(\"REPEAT PASSWORD IS REQUIRED\").oneOf([yup.ref(\"password\")],\"PASSWORD DOES NOT MATCH\"),\r\n                    })\r\n                }>\r\n                    {({isSubmitting})=>(\r\n                        <Form>\r\n                            <TextInput name=\"name\" type=\"text\" label=\"FULL NAME\" placeholder=\"Adam Sameul\" icon={<FiUser></FiUser>}></TextInput>\r\n                            <TextInput name=\"email\" type=\"text\" label=\"EMAIL ADDRESS\" placeholder=\"abcd@example.com\" icon={<FiMail></FiMail>}></TextInput>\r\n                            <TextInput name=\"dateOfBirth\" type=\"text\" label=\"DATE OF BIRTH\" icon={<FiCalendar></FiCalendar>}></TextInput>\r\n                            <TextInput name=\"password\" type=\"password\" label=\"PASSWORD\" placeholder=\"********\" icon={<FiLock></FiLock>}></TextInput>\r\n                            <TextInput name=\"repeatPassword\" type=\"password\" label=\"REPEAT PASSWORD\" placeholder=\"********\" icon={<FiLock></FiLock>}></TextInput>\r\n                            <ButtonGroup>\r\n                                {!isSubmitting && (<StyledFormButton type=\"submit\">SIGNUP</StyledFormButton>)}\r\n                                {\r\n                                    isSubmitting && (\r\n                                        <TailSpin color=\"#1B1A55\" height={49} width={100}></TailSpin>\r\n                                    )\r\n                                }\r\n                            </ButtonGroup>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <ExtraText>Already have an Account ? <TextLink to=\"/login\">LOGIN</TextLink></ExtraText>\r\n            </StyledFormArea>\r\n            <CopyRightText>All Rights reserved &copy; 2024</CopyRightText>\r\n        </div>\r\n    );\r\n}\r\nexport default connect(null,{signupUser})(SignUp);","import React from 'react';\r\nimport { StyledTitle,Avatar,StyledButton,ButtonGroup,StyledFormArea } from '../components/Styles';\r\nimport logo from \"../assets/logo192.png\";\r\n\r\n//Auth and Redux\r\nimport {connect} from \"react-redux\";\r\nimport { logoutUser } from '../Auth/Action/UserAction';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Dashboard=({logoutUser,user})=>{\r\n    const history = useNavigate();\r\n    return (\r\n        <div>\r\n            <div style={{\r\n                position:\"absolute\",\r\n                top:0,\r\n                left:0,\r\n                backgroundColor:\"transparent\",\r\n                width:\"100%\",\r\n                padding:\"15px\",\r\n                display:\"flex\",\r\n                justifyContent:\"flex-start\",\r\n            }}>\r\n                <Avatar image={logo}></Avatar>\r\n            </div>\r\n            <StyledFormArea>\r\n                <StyledTitle size={65}>Welcome, {user.name}</StyledTitle>\r\n                <ButtonGroup>\r\n                    <StyledButton to={`/entryData`}>SUBLYTICS</StyledButton>\r\n                    <StyledButton onClick={()=>logoutUser(history)}>LOGOUT</StyledButton>\r\n                </ButtonGroup>\r\n            </StyledFormArea>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps=({session})=>({\r\n    user:session.user\r\n})\r\nexport default connect(mapStateToProps,{logoutUser})(Dashboard);","import React from 'react';\r\nimport { StyledTitle,Avatar,StyledButton,ButtonGroup,StyledFormArea, ExtraText } from '../components/Styles';\r\nimport logo from \"../assets/logo192.png\";\r\n\r\n//React Router\r\nimport {useParams } from 'react-router-dom';\r\n\r\nconst EmailSent=()=>{\r\n    // const history = useNavigate();\r\n    const { userEmail, reset } = useParams();\r\n    return (\r\n        <div>\r\n            <div style={{\r\n                position:\"absolute\",\r\n                top:0,\r\n                left:0,\r\n                backgroundColor:\"transparent\",\r\n                width:\"100%\",\r\n                padding:\"15px\",\r\n                display:\"flex\",\r\n                justifyContent:\"flex-start\",\r\n            }}>\r\n                <Avatar image={logo}></Avatar>\r\n            </div>\r\n            {reset && userEmail && (\r\n                    <StyledFormArea>\r\n                    <StyledTitle size={65}>Password Reset</StyledTitle>\r\n                    <ExtraText>An Email with your Password Reset Link has been sent to your Email ID : <b>{ userEmail}</b></ExtraText>\r\n                    <ExtraText>Check Your Email and click on the link to reset your Password</ExtraText>\r\n                    <ButtonGroup>\r\n                        <StyledButton to={`/`}>HOME</StyledButton>\r\n                    </ButtonGroup>\r\n                </StyledFormArea>\r\n            )}\r\n            {\r\n                !reset && userEmail && (\r\n                    <StyledFormArea>\r\n                    <StyledTitle size={65}>Account Confirmation</StyledTitle>\r\n                    <ExtraText>An Email with your Account Confirmation Link has been sent to your Email ID : <b>{ userEmail}</b></ExtraText>\r\n                    <ExtraText>Check Your Email and come back to proceed</ExtraText>\r\n                    <ButtonGroup>\r\n                        <StyledButton to={`/login/${userEmail}`}>PROCEED</StyledButton>\r\n                    </ButtonGroup>\r\n                </StyledFormArea>\r\n                )\r\n            }\r\n            {\r\n                !reset && !userEmail && (\r\n                    <StyledFormArea>\r\n                    <StyledTitle size={65}>PASSWORD RESET</StyledTitle>\r\n                    <ExtraText>Your Password has been Reset Successfully</ExtraText>\r\n                    <ExtraText>You May Now Login With Your New Password</ExtraText>\r\n                    <ButtonGroup>\r\n                        <StyledButton to={`/login`}>LOGIN</StyledButton>\r\n                    </ButtonGroup>\r\n                </StyledFormArea>\r\n                )\r\n            }\r\n            \r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default (EmailSent);","import React from 'react';\r\nimport {StyledFormArea,StyledFormButton, Avatar,StyledTitle,colors,ButtonGroup, ExtraText, TextLink, CopyRightText, StyledButton} from \"../components/Styles\";\r\nimport logo from \"../assets/logo192.png\";\r\n\r\n//Formik Import \r\nimport {Formik,Form} from \"formik\";\r\nimport { TextInput } from '../components/FormLib';\r\n\r\n//Login Icons\r\nimport { FiMail, FiLock, FiPhoneCall, FiUser } from \"react-icons/fi\";\r\nimport { BiSolidOffer } from \"react-icons/bi\";\r\nimport { FaMapMarkerAlt, FaCity, FaCreditCard, FaCcVisa } from \"react-icons/fa\";\r\nimport { MdCalendarMonth } from \"react-icons/md\";\r\nimport { BsCalendarMonthFill } from \"react-icons/bs\";\r\nimport { FaAddressBook, } from \"react-icons/fa6\";\r\nimport { MdPlace } from \"react-icons/md\";\r\n\r\n//Validation of Inputs\r\nimport * as yup from \"yup\";\r\n\r\n//Loader and Spinner\r\nimport {TailSpin} from \"react-loader-spinner\";\r\n\r\n//Auth and Redux\r\nimport {connect} from \"react-redux\";\r\nimport { apiCall01 } from '../Auth/Action/UserAction';\r\nimport {useNavigate,useParams } from \"react-router-dom\";\r\n\r\nconst FormData=({apiCall01})=>{\r\n    const history = useNavigate();\r\n    // const { userEmail } = useParams();\r\n    return (\r\n        <div>\r\n            <StyledFormArea>\r\n                <Avatar image={logo}></Avatar>\r\n                <StyledTitle color={colors.primary} size={30}>SUBLYTICS</StyledTitle>\r\n                <Formik initialValues={\r\n                    {\r\n                        offerId:\"\",\r\n                        emailId:\"\",\r\n                        phoneNumber: \"\",\r\n                        firstName: \"\",\r\n                        lastName: \"\",\r\n                        countryCode: \"\",\r\n                        addressCode: \"\",\r\n                        cityName: \"\",\r\n                        stateName: \"\",\r\n                        zipCode: \"\",\r\n                        cardNumber: \"\",\r\n                        cardCVV: \"\",\r\n                        expiryMonth: \"\",\r\n                        expiryYear:\"\",\r\n                    }\r\n                }\r\n                onSubmit={\r\n                    (values,{setSubmitting,setFieldError})=>{\r\n                    console.log(values);\r\n                    apiCall01(values,history,setFieldError,setSubmitting);\r\n                    }\r\n                }\r\n                validationSchema={\r\n                    yup.object({\r\n                        offerId: yup.number().required('OFFER ID IS REQUIRED').oneOf([14, 32], 'OFFER ID INVALID'),\r\n                        emailId: yup.string().email(\"INVALID EMAIL ADDRESS\").required(\"REQUIRED EMAIL ADDRESS\"),\r\n                        phoneNumber: yup.string().matches(/^[0-9]{10}$/, \"INVALID PHONE NUMBER\").required(\"REQUIRED PHONE NUMBER\"),\r\n                        firstName: yup.string().required(\"REQUIRED FIRST NAME\"),\r\n                        lastName: yup.string().required(\"REQUIRED LAST NAME\"),\r\n                        countryCode: yup.string().length(2, \"INVALID COUNTRY CODE LENGTH 2\").required(\"REQUIRED COUNTRY CODE\"),\r\n                        addressCode: yup.string().required(\"REQUIRED ADDRESS\"),\r\n                        cityName: yup.string().required(\"REQUIRED CITY NAME\"),\r\n                        stateName: yup.string().required(\"REQUIRED STATE NAME\"),\r\n                        zipCode: yup.string().matches(/^[0-9]{5}$/, \"INVALID ZIP CODE\").required(\"REQUIRED ZIP CODE\"),\r\n                        cardNumber: yup.string().matches(/^[0-9]{16}$/, \"INVALID CARD NUMBER\").required(\"REQUIRED CARD NUMBER\"),\r\n                        cardCVV: yup.string().matches(/^[0-9]{3}$/, \"INVALID CARD CVV\").required(\"REQUIRED CARD CVV\"),\r\n                        expiryMonth: yup.number().min(1, \"INVALID MONTH\").max(12, \"INVALID MONTH\").required(\"REQUIRED EXPIRY MONTH\"),\r\n                        expiryYear: yup.number().min(new Date().getFullYear(), \"INVALID YEAR\").required(\"REQUIRED EXPIRY YEAR\")\r\n                    })\r\n                }>\r\n                    {({isSubmitting,resetForm})=>(\r\n                        <Form>\r\n                            <TextInput name=\"offerId\" type=\"number\" label=\"OFFER ID\" placeholder=\"21\" icon={<BiSolidOffer></BiSolidOffer>}></TextInput>\r\n                            <TextInput name=\"emailId\" type=\"text\" label=\"EMAIL ADDRESS\" placeholder=\"abcd@example.com\" icon={<FiMail></FiMail>}></TextInput>\r\n                            <TextInput name=\"phoneNumber\" type=\"tel\" label=\"PHONE NUMBER\" placeholder=\"9840854785\" icon={<FiPhoneCall></FiPhoneCall>}></TextInput>\r\n                            <TextInput name=\"firstName\" type=\"text\" label=\"FIRST NAME\" placeholder=\"Anil\" icon={<FiUser ></FiUser>}></TextInput>\r\n                            <TextInput name=\"lastName\" type=\"text\" label=\"LAST NAME\" placeholder=\"Kumar\" icon={<FiUser ></FiUser>}></TextInput>\r\n                            <TextInput name=\"countryCode\" type=\"text\" label=\"COUNTRY CODE\" placeholder=\"US\" icon={<FaMapMarkerAlt ></FaMapMarkerAlt>}></TextInput>\r\n                            <TextInput name=\"addressCode\" type=\"text\" label=\"ADDRESS\" placeholder=\"No 12 Xavier Road\" icon={<FaAddressBook ></FaAddressBook>}></TextInput>\r\n                            <TextInput name=\"cityName\" type=\"text\" label=\"CITY\" placeholder=\"New York\" icon={<FaCity ></FaCity>}></TextInput>\r\n                            <TextInput name=\"stateName\" type=\"text\" label=\"STATE\" placeholder=\"Texas\" icon={<MdPlace ></MdPlace>}></TextInput>\r\n                            <TextInput name=\"zipCode\" type=\"number\" label=\"ZIP CODE\" placeholder=\"09323\" icon={<FaMapMarkerAlt ></FaMapMarkerAlt>}></TextInput>\r\n                            <TextInput name=\"cardNumber\" type=\"number\" label=\"CARD NUMBER\" placeholder=\"4323234223212399\" icon={<FaCreditCard ></FaCreditCard>}></TextInput>\r\n                            <TextInput name=\"cardCVV\" type=\"number\" label=\"CARD CVV\" placeholder=\"239\" icon={<FaCcVisa ></FaCcVisa>}></TextInput>\r\n                            <TextInput name=\"expiryMonth\" type=\"number\" label=\"EXPIRY MONTH\" placeholder=\"12\" icon={<MdCalendarMonth ></MdCalendarMonth>}></TextInput>\r\n                            <TextInput name=\"expiryYear\" type=\"number\" label=\"EXPIRY YEAR\" placeholder=\"2025\" icon={<BsCalendarMonthFill></BsCalendarMonthFill>}></TextInput>\r\n                            <ButtonGroup>\r\n                                {/* {!isSubmitting && (<><StyledFormButton type=\"submit\">SUBMIT</StyledFormButton></>)}\r\n                                {\r\n                                    isSubmitting && (\r\n                                        <TailSpin color=\"#1B1A55\" height={49} width={100}></TailSpin>\r\n                                    )\r\n                                } */}\r\n                                {!isSubmitting && (<>\r\n                                    <StyledFormButton type=\"submit\">SUBMIT</StyledFormButton>\r\n                                    <StyledButton type=\"button\" to={\"/dashboard\"}>BACK</StyledButton>\r\n                                </>)}\r\n                                {\r\n                                    isSubmitting && (\r\n                                        <TailSpin color=\"#1B1A55\" height={49} width={100}></TailSpin>\r\n                                    )\r\n                                }\r\n                            </ButtonGroup>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </StyledFormArea>\r\n            <CopyRightText>All Rights reserved &copy; 2024</CopyRightText>\r\n        </div>\r\n    );\r\n}\r\n// export default FormData;\r\nexport default connect(null,{apiCall01})(FormData);","import React from 'react';\r\nimport {StyledFormArea,StyledFormButton, Avatar,StyledTitle,colors,ButtonGroup, CopyRightText} from \"../components/Styles\";\r\nimport logo from \"../assets/logo192.png\";\r\n\r\n//Formik Import \r\nimport {Formik,Form} from \"formik\";\r\nimport { TextInput } from '../components/FormLib';\r\n\r\n//Login Icons\r\nimport {FiMail} from \"react-icons/fi\";\r\n\r\n//Validation of Inputs\r\nimport * as yup from \"yup\";\r\n\r\n//Loader and Spinner\r\nimport {TailSpin} from \"react-loader-spinner\";\r\n\r\n//Auth and Redux\r\nimport {connect} from \"react-redux\";\r\nimport { forgottenPassword } from '../Auth/Action/UserAction';\r\nimport {useNavigate,useParams } from \"react-router-dom\";\r\n\r\nconst ForgottenPassword = ({forgottenPassword})=>{\r\n    const history = useNavigate();\r\n    const { userEmail } = useParams();\r\n    return (\r\n        <div>\r\n            <StyledFormArea>\r\n                <Avatar image={logo}></Avatar>\r\n                <StyledTitle color={colors.primary} size={30}>PASSWORD RESET</StyledTitle>\r\n                <Formik initialValues={\r\n                    {\r\n                    email:userEmail,\r\n                    redirectUrl:\"https://chimerical-concha-3f534e.netlify.app/resetPassword\",\r\n                    }\r\n                }\r\n                onSubmit={\r\n                    (values,{setSubmitting,setFieldError})=>{\r\n                    console.log(values);\r\n                    forgottenPassword(values,history,setFieldError,setSubmitting);\r\n                    }\r\n                }\r\n                validationSchema={\r\n                    yup.object({\r\n                        email: yup.string().email(\"INVALID EMAIL ADDRESS\").required(\"REQUIRED EMAIL ADDRESS\"),\r\n                    })\r\n                }>\r\n                    {({isSubmitting})=>(\r\n                        <Form>\r\n                            <TextInput name=\"email\" type=\"text\" label=\"ENTER YOUR EMAIL ADDRESS\" placeholder=\"abcd@example.com\" icon={<FiMail></FiMail>}></TextInput>\r\n                            <ButtonGroup>\r\n                                {!isSubmitting && (<StyledFormButton type=\"submit\">SUBMIT</StyledFormButton>)}\r\n                                {\r\n                                    isSubmitting && (\r\n                                        <TailSpin color=\"#1B1A55\" height={49} width={100}></TailSpin>\r\n                                    )\r\n                                }\r\n                            </ButtonGroup>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                \r\n                \r\n            </StyledFormArea>\r\n            <CopyRightText>All Rights reserved &copy; 2024</CopyRightText>\r\n        </div>\r\n    );\r\n}\r\nexport default connect(null,{forgottenPassword})(ForgottenPassword);","import React from 'react';\r\nimport {StyledFormArea,StyledFormButton, Avatar,StyledTitle,colors,ButtonGroup,CopyRightText} from \"../components/Styles\";\r\nimport logo from \"../assets/logo192.png\";\r\n\r\n//Formik Import \r\nimport {Formik,Form} from \"formik\";\r\nimport { TextInput } from '../components/FormLib';\r\n\r\n//Login Icons\r\nimport {FiLock} from \"react-icons/fi\";\r\n\r\n//Validation of Inputs\r\nimport * as yup from \"yup\";\r\n\r\n//Loader and Spinner\r\nimport {TailSpin} from \"react-loader-spinner\";\r\n\r\n//Auth and Redux\r\nimport {connect} from \"react-redux\";\r\nimport { resetPassword } from '../Auth/Action/UserAction';\r\nimport {useNavigate,useParams } from \"react-router-dom\";\r\n\r\nconst PasswordReset=({resetPassword})=>{\r\n    const history = useNavigate();\r\n    const { userId,resetString } = useParams();\r\n    return (\r\n        <div>\r\n            <StyledFormArea>\r\n                <Avatar image={logo}></Avatar>\r\n                <StyledTitle color={colors.primary} size={30}>PASSWORD RESET</StyledTitle>\r\n                <Formik initialValues={\r\n                    {\r\n                        newPassword: \"\",\r\n                        confirmNewPassword: \"\",\r\n                        userId,\r\n                        resetString\r\n                    }\r\n                }\r\n                onSubmit={\r\n                    (values,{setSubmitting,setFieldError})=>{\r\n                    console.log(values);\r\n                    resetPassword(values,history,setFieldError,setSubmitting);\r\n                    }\r\n                }\r\n                validationSchema={\r\n                    yup.object({\r\n                        newPassword: yup.string().min(8,\"SHOULD BE OF MINIMUM 8 CHARACTERS\").max(30,\"SHOULD BE WITHIN 30 CHARACTERS\").required(\"PASSWORD IS REQUIRED\"),\r\n                        confirmNewPassword: yup.string().required(\"REQUIRED\").oneOf([yup.ref(\"newPassword\")], \"PASSWORD MUST MATCH\"),\r\n                    })\r\n                }>\r\n                    {({isSubmitting})=>(\r\n                        <Form>\r\n                            \r\n                            <TextInput name=\"newPassword\" type=\"password\" label=\"NEW PASSWORD\" placeholder=\"********\" icon={<FiLock></FiLock>}></TextInput>\r\n                            <TextInput name=\"confirmNewPassword\" type=\"password\" label=\"CONFIRM NEW PASSWORD\" placeholder=\"********\" icon={<FiLock></FiLock>}></TextInput>\r\n                            <ButtonGroup>\r\n                                {!isSubmitting && (<StyledFormButton type=\"submit\">RESET</StyledFormButton>)}\r\n                                {\r\n                                    isSubmitting && (\r\n                                        <TailSpin color=\"#1B1A55\" height={49} width={100}></TailSpin>\r\n                                    )\r\n                                }\r\n                            </ButtonGroup>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </StyledFormArea>\r\n            <CopyRightText>All Rights reserved &copy; 2024</CopyRightText>\r\n        </div>\r\n    );\r\n}\r\nexport default connect(null,{resetPassword})(PasswordReset);","import React from 'react';\r\nimport { StyledTitle,Avatar,StyledButton,ButtonGroup,StyledFormArea, ExtraText } from '../components/Styles';\r\nimport logo from \"../assets/logo192.png\";\r\n\r\n//React Router\r\nimport {useParams } from 'react-router-dom';\r\n\r\nconst ResponsePage=()=>{\r\n    // const history = useNavigate();\r\n    const { message,orderID,status } = useParams();\r\n    return (\r\n        <div>\r\n            <div style={{\r\n                position:\"absolute\",\r\n                top:0,\r\n                left:0,\r\n                backgroundColor:\"transparent\",\r\n                width:\"100%\",\r\n                padding:\"15px\",\r\n                display:\"flex\",\r\n                justifyContent:\"flex-start\",\r\n            }}>\r\n                <Avatar image={logo}></Avatar>\r\n            </div>\r\n            <StyledFormArea>\r\n                    <StyledTitle size={65}>Response From the Server</StyledTitle>\r\n                <ExtraText><b>RESPONSE STATUS FROM THE CLIENT SERVER : </b>FAILURE</ExtraText>\r\n                {orderID != null && (\r\n                        <ExtraText>\r\n                            <b>ORDER ID : </b>{orderID}\r\n                        </ExtraText>\r\n                        )}\r\n\r\n                    <ExtraText><b>RESPONSE MESSAGE : </b>{message}</ExtraText>\r\n                \r\n                    <ButtonGroup>\r\n                        <StyledButton to={`/dashboard`}>HOME</StyledButton>\r\n                        <StyledButton to={`/entryData`}>RE-ENTRY OF DATA</StyledButton>\r\n                    </ButtonGroup>\r\n                </StyledFormArea>\r\n            \r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default (ResponsePage);","import React from 'react';\r\nimport { StyledTitle,Avatar,StyledButton,ButtonGroup,StyledFormArea, ExtraText } from '../components/Styles';\r\nimport logo from \"../assets/logo192.png\";\r\n\r\n//React Router\r\nimport {useParams } from 'react-router-dom';\r\n\r\nconst ResponsePageSuccess=()=>{\r\n    // const history = useNavigate();\r\n    const { status,responseData, gateWayResponseID, gateWayID, gateAuthCode, ORDERID, customerID, OrderNotes } = useParams();\r\n    return (\r\n        <div>\r\n            <div style={{\r\n                position:\"absolute\",\r\n                top:0,\r\n                left:0,\r\n                backgroundColor:\"transparent\",\r\n                width:\"100%\",\r\n                padding:\"15px\",\r\n                display:\"flex\",\r\n                justifyContent:\"flex-start\",\r\n            }}>\r\n                \r\n            </div>\r\n            <StyledFormArea>\r\n                    <Avatar image={logo}></Avatar>\r\n                    <StyledTitle size={65}>Response From the Server</StyledTitle>\r\n                    <ExtraText><b>RESPONSE STATUS FROM THE CLIENT SERVER : </b>{status}</ExtraText>\r\n                    <ExtraText><b>RESPONSE DATA : </b>{responseData}</ExtraText>\r\n                    <ExtraText><b>GATEWAY RESPONSE ID : </b>{gateWayResponseID }</ExtraText>\r\n                    <ExtraText><b>GATEWAY ID : </b>{gateWayID }</ExtraText>\r\n                    <ExtraText><b>GATEWAY AUTH ID : </b>{gateAuthCode }</ExtraText>\r\n                    <ExtraText><b>ORDER ID : </b>{ORDERID }</ExtraText>\r\n                    <ExtraText><b>CUSTOMER ID : </b>{customerID }</ExtraText>\r\n                    <ExtraText><b>ORDER NOTES : </b>{OrderNotes }</ExtraText>\r\n                    <ButtonGroup>\r\n                        <StyledButton to={`/dashboard`}>HOME</StyledButton>\r\n                        <StyledButton to={`/entryData`}>RE-ENTRY OF DATA</StyledButton>\r\n                    </ButtonGroup>\r\n                </StyledFormArea>\r\n            \r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default (ResponsePageSuccess);","import {StyledContainer} from \"./components/Styles\";\r\nimport React from 'react';\r\nimport Home from \"./pages/Home\";\r\nimport Login from \"./pages/Login\";\r\nimport SignUp from \"./pages/SignUp\";\r\nimport Dashboard from \"./pages/Dashboard\";\r\nimport EmailSent from \"./pages/EmailSent\";\r\nimport FormData from \"./pages/FormData\";\r\nimport { BrowserRouter as Router,Routes,Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport ForgottenPassword from \"./pages/forgottenPassword\";\r\nimport PasswordReset from \"./pages/PasswordReset\";\r\nimport ResponsePage from \"./pages/ResponsePage\";\r\nimport ResponsePageSuccess from \"./pages/ResponsePageSuccess\";\r\nimport AuthRoute from \"./components/AuthRoutes\";\r\n\r\nfunction App({checked}) {\r\n  return (\r\n    <Router>\r\n      {checked &&\r\n        <StyledContainer>\r\n        <Routes>\r\n\r\n          <Route path=\"/forgottenPassword\" element={<ForgottenPassword/>}></Route>\r\n          <Route path=\"/resetPassword/:userId?/:resetString?\" element={<PasswordReset/>}></Route>\r\n          <Route path=\"/emailsent/:userEmail?/:reset?\" element={<EmailSent/>}></Route>\r\n            <Route path=\"/response/:message?/:orderID?/:status?\" element={<ResponsePage />}></Route>\r\n            <Route path=\"/responseSuccess/:status?/:responseData?/:gateWayResponseID?/:gateWayID?/:gateAuthCode?/:ORDERID?/:customerID?/:OrderNotes?\" element={<ResponsePageSuccess />} />\r\n          <Route path=\"/signup\" element={<SignUp/>}></Route>\r\n          <Route path=\"/dashboard\" element={<Dashboard/>}></Route>\r\n          <Route path=\"/login/:userEmail?\" element={<Login/>}></Route>\r\n          <Route path=\"/\" element={<Home/>}></Route>\r\n          <Route path=\"/entryData\" element={<FormData/>}></Route>\r\n        </Routes>\r\n        </StyledContainer>\r\n      }\r\n    </Router>\r\n    \r\n    \r\n    \r\n  );\r\n}\r\n\r\nconst mapStateToProps=({session})=>({\r\n  checked: session.checked\r\n})\r\n\r\nexport default connect(mapStateToProps)(App);","import { combineReducers } from \"redux\";\r\n\r\n//Session\r\nimport { sessionReducer } from \"redux-react-session\";\r\n\r\nconst rootReducer=combineReducers({\r\n    session: sessionReducer\r\n});\r\nexport default rootReducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport {thunk} from 'redux-thunk';\r\nimport rootReducer from './Reducer/RootReducer';\r\nimport { sessionService } from 'redux-react-session';\r\n\r\nconst initialState = {};\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) => {\r\n    const middleware = getDefaultMiddleware().concat(thunk);\r\n    console.log('Middleware:', middleware); // Debug line\r\n    return middleware;\r\n  },\r\n  preloadedState: initialState,\r\n});\r\n\r\nsessionService.initSessionService(store);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n//Auth Stuff\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./Auth/store\";\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n    \r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}