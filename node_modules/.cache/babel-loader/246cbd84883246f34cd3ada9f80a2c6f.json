{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { thunk } from 'redux-thunk';\nimport rootReducer from './Reducer/RootReducer';\nimport { sessionService } from 'redux-react-session';\nconst initialState = {};\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => {\n    const middleware = getDefaultMiddleware().concat(thunk);\n    console.log('Middleware:', middleware); // Debug line\n    return middleware;\n  },\n  preloadedState: initialState\n});\nsessionService.initSessionService(store);\nexport default store;","map":{"version":3,"names":["configureStore","thunk","rootReducer","sessionService","initialState","store","reducer","middleware","getDefaultMiddleware","concat","console","log","preloadedState","initSessionService"],"sources":["D:/CODING DEVELOPMENT SKILLS/Full_Stack_Developement/React_Based_FrontEnd/login/src/Auth/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport {thunk} from 'redux-thunk';\r\nimport rootReducer from './Reducer/RootReducer';\r\nimport { sessionService } from 'redux-react-session';\r\n\r\nconst initialState = {};\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) => {\r\n    const middleware = getDefaultMiddleware().concat(thunk);\r\n    console.log('Middleware:', middleware); // Debug line\r\n    return middleware;\r\n  },\r\n  preloadedState: initialState,\r\n});\r\n\r\nsessionService.initSessionService(store);\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAAQC,KAAK,QAAO,aAAa;AACjC,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,SAASC,cAAc,QAAQ,qBAAqB;AAEpD,MAAMC,YAAY,GAAG,CAAC,CAAC;AAEvB,MAAMC,KAAK,GAAGL,cAAc,CAAC;EAC3BM,OAAO,EAAEJ,WAAW;EACpBK,UAAU,EAAGC,oBAAoB,IAAK;IACpC,MAAMD,UAAU,GAAGC,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAACR,KAAK,CAAC;IACvDS,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEJ,UAAU,CAAC,CAAC,CAAC;IACxC,OAAOA,UAAU;EACnB,CAAC;EACDK,cAAc,EAAER;AAClB,CAAC,CAAC;AAEFD,cAAc,CAACU,kBAAkB,CAACR,KAAK,CAAC;AAExC,eAAeA,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module"}