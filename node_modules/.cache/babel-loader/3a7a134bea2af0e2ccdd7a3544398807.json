{"ast":null,"code":"import axios from \"axios\";\nimport { sessionService } from \"redux-react-session\";\nexport const loginUser = (credentials, history, setFieldError, setSubmitting) => {\n  return async () => {\n    //Make Checks and get some Data\n\n    await axios.post(\"https://react-based-project-updation.onrender.com/user/signIn\", credentials, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      const {\n        data\n      } = response;\n      console.log(data);\n      if (data.status === \"FAILED\") {\n        const {\n          message\n        } = data;\n        if (message.includes(\"User\")) {\n          setFieldError(\"email\", message);\n          setFieldError(\"password\", message);\n        } else if (message.includes(\"Password\")) {\n          setFieldError(\"password\", message);\n        } else if (message.includes(\"Email\")) {\n          setFieldError(\"email\", message);\n        }\n      } else if (data.status === \"SUCCESS\") {\n        const userData = data.data[0];\n        const token = userData._id;\n        console.log(data);\n        sessionService.saveSession(token).then(() => {\n          sessionService.saveUser(userData).then(() => {\n            // console.log(userData);\n            localStorage.setItem(\"UserData\", JSON.stringify(userData));\n            history(\"/dashboard\");\n          }).catch(err => console.error(err));\n        }).catch(err => console.error(err));\n      }\n      //Complete Submission\n      setSubmitting(false);\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n};\nexport const signupUser = (credentials, history, setFieldError, setSubmitting) => {\n  return async dispatchEvent => {\n    await axios.post(\"https://react-based-project-updation.onrender.com/user/signUp\", credentials, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      const {\n        data\n      } = response;\n      if (data.status === \"FAILED\") {\n        const {\n          message\n        } = data;\n        if (message.includes(\"Name\")) {\n          setFieldError(\"name\", message);\n        } else if (message.includes(\"Email\")) {\n          setFieldError(\"email\", message);\n        } else if (message.includes(\"DateOfBirth\")) {\n          setFieldError(\"dateOfBirth\", message);\n        } else if (message.includes(\"Password\")) {\n          setFieldError(\"password\", message);\n        } else if (message.includes(\"User\")) {\n          setFieldError(\"name\", message);\n          setFieldError(\"email\", message);\n          setFieldError(\"dateOfBirth\", message);\n          setFieldError(\"password\", message);\n        }\n      } else if (data.status === \"PENDING\") {\n        // Email has to be verified\n        const {\n          email\n        } = credentials;\n        history(`/emailsent/${email}`);\n      } else if (data.status === \"SUCCESS\") {\n        const {\n          email,\n          password\n        } = credentials;\n        dispatchEvent(loginUser({\n          email,\n          password\n        }, history, setFieldError, setSubmitting));\n      }\n      // Complete Submission\n      setSubmitting(false);\n    }).catch(err => console.error(err));\n  };\n};\nexport const logoutUser = history => {\n  return async () => {\n    await sessionService.deleteSession();\n    await sessionService.deleteUser();\n    history(\"/\");\n  };\n};\nexport const forgottenPassword = (credentials, history, setFieldError, setSubmitting) => {\n  return async () => {\n    //Make Checks and get some Data\n\n    await axios.post(\"https://react-based-project-updation.onrender.com/user/requestPasswordReset\", credentials, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      const {\n        data\n      } = response;\n      console.log(data);\n      if (data.status === \"FAILED\") {\n        const {\n          message\n        } = data;\n        if (message.includes(\"Email\") || message.includes(\"Account\") || message.includes(\"Password\")) {\n          setFieldError(\"email\", message);\n        }\n      } else if (data.status === \"PENDING\") {\n        const {\n          email\n        } = credentials;\n        history(`/emailsent/${email}/${true}`);\n      }\n      //Complete Submission\n      setSubmitting(false);\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n};\nexport const resetPassword = (credentials, history, setFieldError, setSubmitting) => {\n  return async () => {\n    //Make Checks and get some Data\n\n    await axios.post(\"https://react-based-project-updation.onrender.com/user/resetPassword\", credentials, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      const {\n        data\n      } = response;\n      console.log(data);\n      if (data.status === \"FAILED\") {\n        const {\n          message\n        } = data;\n        if (message.includes(\"Password\")) {\n          setFieldError(\"newPassword\", message);\n        }\n      } else if (data.status === \"SUCCESS\") {\n        history(`/emailsent`);\n      }\n      //Complete Submission\n      setSubmitting(false);\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n};\nexport const apiCall01 = (credentials, history, setFieldError, setSubmitting) => {\n  console.log(credentials);\n  const storedUserData = localStorage.getItem(\"UserData\");\n  if (storedUserData) {\n    const userData1 = JSON.parse(storedUserData);\n    console.log(userData1);\n  }\n  // return async () => { \n  //     await axios.post(\"https://react-based-project-updation.onrender.com/user/APIRequest_01\",credentials,\n  //             {\n  //                 headers:{\n  //                     \"Content-Type\":\"application/json\"\n  //                 }\n  //             }\n  //     ).then((res) => {\n  //         const { data} = res;\n  //         const {status } = data;\n  //         if (status == \"FAILED\") {\n  //             const { message, orderID } = data;\n  //             console.log(res);\n  //             history(`/response/${message}/${orderID}/${status}`);\n  //         }\n  //         else {\n  //             const { responseData, gateWayResponseID, gateWayID, gateAuthCode, ORDERID, customerID, OrderNotes } = data;\n  //             console.log('Response Data:', responseData);\n  //             console.log('GateWay Response ID:', gateWayResponseID);\n  //             console.log('GateWay ID:', gateWayID);\n  //             console.log('GateAuthCode:', gateAuthCode);\n  //             console.log('Order ID:', ORDERID);\n  //             console.log('Customer ID:', customerID);\n  //             console.log('Order Notes:', OrderNotes);\n  //             history(`/responseSuccess/${status}/${responseData}/${gateWayResponseID}/${gateWayID}/${gateAuthCode}/${ORDERID}/${customerID}/${OrderNotes}`);\n  //         }\n\n  //     })\n  //     .catch((err) => {\n  //         console.error(err);\n  //     })\n  // };\n};","map":{"version":3,"names":["axios","sessionService","loginUser","credentials","history","setFieldError","setSubmitting","post","headers","then","response","data","console","log","status","message","includes","userData","token","_id","saveSession","saveUser","localStorage","setItem","JSON","stringify","catch","err","error","signupUser","dispatchEvent","email","password","logoutUser","deleteSession","deleteUser","forgottenPassword","resetPassword","apiCall01","storedUserData","getItem","userData1","parse"],"sources":["D:/CODING DEVELOPMENT SKILLS/Full_Stack_Developement/React_Based_FrontEnd/login/src/Auth/Action/UserAction.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nimport { sessionService } from \"redux-react-session\";\r\n\r\n\r\nexport const loginUser=(credentials,history,setFieldError,setSubmitting)=>{\r\n\r\n    return async ()=>\r\n    {\r\n        //Make Checks and get some Data\r\n\r\n        await axios.post(\"https://react-based-project-updation.onrender.com/user/signIn\",credentials,\r\n            {\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\"\r\n                }\r\n            }\r\n        ).then((response)=>\r\n            {\r\n                const {data}=response;\r\n                console.log(data);\r\n                if (data.status ===\"FAILED\"){\r\n                    const { message }=data;\r\n\r\n                    if (message.includes(\"User\")){\r\n                        setFieldError(\"email\",message);\r\n                        setFieldError(\"password\",message);\r\n                    }\r\n                    else if (message.includes(\"Password\")){\r\n                        setFieldError(\"password\",message);\r\n                    }\r\n                    else if (message.includes(\"Email\")){\r\n                        setFieldError(\"email\",message);\r\n                    }\r\n\r\n                }\r\n                else if (data.status === \"SUCCESS\"){\r\n                    const userData=data.data[0];\r\n                    const token=userData._id;\r\n                    console.log(data);\r\n                    sessionService.saveSession(token).then(()=>\r\n                        {\r\n                            sessionService.saveUser(userData).then(()=>\r\n                            {\r\n                                // console.log(userData);\r\n                                localStorage.setItem(\"UserData\", JSON.stringify(userData));\r\n                                    history(\"/dashboard\");\r\n                                }).catch(err=>console.error(err))\r\n                        }).catch(err=>console.error(err))\r\n                }\r\n                //Complete Submission\r\n                setSubmitting(false);\r\n\r\n            }\r\n        ).catch((err)=>\r\n            {\r\n                console.error(err);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const signupUser=(credentials,history,setFieldError,setSubmitting)=>{\r\n    return async (dispatchEvent)=>\r\n        {\r\n\r\n            await axios.post(\"https://react-based-project-updation.onrender.com/user/signUp\",credentials,\r\n                {\r\n                    headers:{\r\n                        \"Content-Type\":\"application/json\"\r\n                    }\r\n                }\r\n            ).then((response)=>\r\n            {\r\n                const {data}=response;\r\n                if (data.status===\"FAILED\")\r\n                    {\r\n                        const {message}=data;\r\n                        if(message.includes(\"Name\"))\r\n                            {\r\n                                setFieldError(\"name\",message);\r\n                            }\r\n                        else if (message.includes(\"Email\"))\r\n                            {\r\n                                setFieldError(\"email\",message);\r\n                            }\r\n                        else if (message.includes(\"DateOfBirth\"))\r\n                            {\r\n                                setFieldError(\"dateOfBirth\",message);\r\n                            }\r\n                        else if (message.includes(\"Password\"))\r\n                            {\r\n                                setFieldError(\"password\",message);\r\n                            }\r\n                        else if (message.includes(\"User\")){\r\n                            setFieldError(\"name\",message);\r\n                            setFieldError(\"email\",message);\r\n                            setFieldError(\"dateOfBirth\",message);\r\n                            setFieldError(\"password\",message);\r\n                        }\r\n                        \r\n                            \r\n                    }\r\n                else if (data.status===\"PENDING\")\r\n                    {\r\n                    // Email has to be verified\r\n                        const {email}=credentials;\r\n                        history(`/emailsent/${email}`);\r\n                    }\r\n                else if (data.status===\"SUCCESS\")\r\n                    {\r\n                        const {email,password}=credentials;\r\n                        dispatchEvent(loginUser({email,password},history,setFieldError,setSubmitting));\r\n                }\r\n                // Complete Submission\r\n                setSubmitting(false);\r\n            }\r\n                ).catch((err)=>console.error(err));\r\n        }\r\n}\r\n\r\nexport const logoutUser=(history)=>\r\n    {\r\n        return async ()=>\r\n            {\r\n                await sessionService.deleteSession();\r\n                await sessionService.deleteUser();\r\n                history(\"/\");\r\n            }\r\n\r\n}\r\n    \r\n\r\nexport const forgottenPassword=(credentials,history,setFieldError,setSubmitting)=>{\r\n\r\n    return async ()=>\r\n    {\r\n        //Make Checks and get some Data\r\n\r\n        await axios.post(\"https://react-based-project-updation.onrender.com/user/requestPasswordReset\",credentials,\r\n            {\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\"\r\n                }\r\n            }\r\n        ).then((response)=>\r\n            {\r\n                const {data}=response;\r\n                console.log(data);\r\n                if (data.status ===\"FAILED\"){\r\n                    const { message }=data;\r\n\r\n                    if (message.includes(\"Email\") || message.includes(\"Account\") || message.includes(\"Password\")){\r\n                        setFieldError(\"email\",message);\r\n                    }\r\n                }\r\n                else if (data.status === \"PENDING\"){\r\n                    const { email } = credentials;\r\n                    history(`/emailsent/${email}/${true}`);\r\n                }\r\n                //Complete Submission\r\n                setSubmitting(false);\r\n\r\n            }\r\n        ).catch((err)=>\r\n            {\r\n                console.error(err);\r\n            }\r\n        )\r\n    }\r\n}\r\nexport const resetPassword=(credentials,history,setFieldError,setSubmitting)=>{\r\n\r\n    return async ()=>\r\n    {\r\n        //Make Checks and get some Data\r\n\r\n        await axios.post(\"https://react-based-project-updation.onrender.com/user/resetPassword\",credentials,\r\n            {\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\"\r\n                }\r\n            }\r\n        ).then((response)=>\r\n            {\r\n                const {data}=response;\r\n                console.log(data);\r\n                if (data.status ===\"FAILED\"){\r\n                    const { message }=data;\r\n\r\n                    if (message.includes(\"Password\")){\r\n                        setFieldError(\"newPassword\",message);\r\n                    }\r\n                }\r\n                else if (data.status === \"SUCCESS\"){\r\n                    history(`/emailsent`);\r\n                }\r\n                //Complete Submission\r\n                setSubmitting(false);\r\n\r\n            }\r\n        ).catch((err)=>\r\n            {\r\n                console.error(err);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const apiCall01 = (credentials, history, setFieldError, setSubmitting) => {\r\n    console.log(credentials);\r\n    const storedUserData = localStorage.getItem(\"UserData\");\r\n    if (storedUserData) {\r\n        const userData1 = JSON.parse(storedUserData);\r\n        console.log(userData1);\r\n    }\r\n    // return async () => { \r\n    //     await axios.post(\"https://react-based-project-updation.onrender.com/user/APIRequest_01\",credentials,\r\n    //             {\r\n    //                 headers:{\r\n    //                     \"Content-Type\":\"application/json\"\r\n    //                 }\r\n    //             }\r\n    //     ).then((res) => {\r\n    //         const { data} = res;\r\n    //         const {status } = data;\r\n    //         if (status == \"FAILED\") {\r\n    //             const { message, orderID } = data;\r\n    //             console.log(res);\r\n    //             history(`/response/${message}/${orderID}/${status}`);\r\n    //         }\r\n    //         else {\r\n    //             const { responseData, gateWayResponseID, gateWayID, gateAuthCode, ORDERID, customerID, OrderNotes } = data;\r\n    //             console.log('Response Data:', responseData);\r\n    //             console.log('GateWay Response ID:', gateWayResponseID);\r\n    //             console.log('GateWay ID:', gateWayID);\r\n    //             console.log('GateAuthCode:', gateAuthCode);\r\n    //             console.log('Order ID:', ORDERID);\r\n    //             console.log('Customer ID:', customerID);\r\n    //             console.log('Order Notes:', OrderNotes);\r\n    //             history(`/responseSuccess/${status}/${responseData}/${gateWayResponseID}/${gateWayID}/${gateAuthCode}/${ORDERID}/${customerID}/${OrderNotes}`);\r\n    //         }\r\n            \r\n    //     })\r\n    //     .catch((err) => {\r\n    //         console.error(err);\r\n    //     })\r\n    // };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}